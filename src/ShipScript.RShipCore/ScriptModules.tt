<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Xml.Linq" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
// <autogenerated>
// This code was generated by a tool. Any changes made manually will be lost
// the next time this code is regenerated.
// </autogenerated>

// ReSharper disable All

using System.Collections.Generic;
<#
Func<string, bool> exists = script => 
{
    try 
    {    
        return File.Exists(Host.ResolvePath("NativeModules\\" + script + ".js"));
    }
    catch
    {
        Error("Script " + script + ".js is missing.");
        return false;
    }
};

var xmlString = File.ReadAllText(Host.ResolvePath("includes.xml"));
var xdoc = XDocument.Parse(xmlString);
var includes = from include in xdoc.Descendants("script")
               let script = include.Attribute("name").Value
               where exists(script)
               select script;
#>

namespace ShipScript.RShipCore
{
    public static class ScriptModules
    {
        public static readonly Dictionary<string, string> Scripts = new Dictionary<string, string>
        {
<# foreach (var script in includes) { #>
            ["<#= script #>"] = <#= script #>,
<# } #>
        };

<# foreach (var script in includes) { 
    var content = File.ReadAllText(Host.ResolvePath("NativeModules\\" + script + ".js"));
    content = content.Replace("\"", "\"\"");
#>

// ====== <#= script #>.js ======
public const string <#= script #> =
@"<#= content #>";
// ====== end <#= script #>.js ======


<# } #>
    }
}